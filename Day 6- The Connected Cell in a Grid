function neighbor(m,r,c){
    var arr=[];
    if (r-1>=0&&c-1>=0){
        if(m[r-1][c-1]===1){
            arr.push([r-1,c-1]);
        }
    }
    if(r-1>=0){
        if(m[r-1][c]===1){
            arr.push([r-1,c]);
        }
    }
    if(r-1>=0&&c+1<m[r].length){
        if(m[r-1][c+1]===1){
            arr.push([r-1,c+1]);
        }
    }
    if(c-1>=0){
        if(m[r][c-1]===1){
            arr.push([r,c-1]);
        }
    }
    if(c+1<m[r].length){
        if(m[r][c+1]===1){
            arr.push([r,c+1]);
        }
    }
    if(r+1<m.length&&c-1>=0){
        if(m[r+1][c-1]===1){
            arr.push([r+1,c-1]);
        }
    }
    if(r+1<m.length){
        if(m[r+1][c]===1){
            arr.push([r+1,c]);
        }
    }
    if(r+1<m.length&&c+1<m[r].length){
        if(m[r+1][c+1]===1){
            arr.push([r+1,c+1]);
        }
    }
    return arr;
}

function bfs(m,r,c,visited){
    visited[r][c]=true;
    var acc=1;
    var nei=new Array();
    nei.push([r,c]);
    while(nei.length>0){
        var cur=nei.shift();
        var adj=neighbor(m,cur[0],cur[1]);
        for(var i=0;i<adj.length;i++){
            var row=adj[i][0];
            var col=adj[i][1];
            if(!visited[row][col]){
                visited[row][col]=true;
                acc++;
                nei.push([row,col]);
            }
        }
    }
    return acc;
}

function processData(input) {
    var m=input.split('\n')[0];
    var n=input.split('\n')[1];
    var matrix= [m];
    //build matrix
    for(var i=0;i<m;++i){
        var row=input.split('\n')[2+i].split(' ').map(Number);
        matrix[i]=[n];
        for(var j=0;j<n;++j){
            matrix[i][j]=row[j];
        }
    }
    //initialize visited
    var visited = [m];
    for(var i=0;i<m;i++){
        visited[i]=[n];
        for(var j=0;j<n;j++){
            if(matrix[i][j]===0){
                visited[i][j]=true;
            }
            else
                visited[i][j]=false;
        }
    }
    //find possible solution
    var Solution=[];
    var count=0;
    for(var i=0;i<matrix.length;i++){
        for(var j=0;j<matrix[i].length;j++){
            if(matrix[i][j]===1&&!visited[i][j]){
                count=bfs(matrix,i,j,visited)
                Solution.push(count);
            }
        }
    }
    Solution.sort((a,b)=>(b-a));
    console.log(Solution[0]);
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});